/* Grammar.java */
/* Generated By:JavaCC: Do not edit this line. Grammar.java */
public class Grammar implements GrammarConstants {

  public static void main(String args[]) throws ParseException {
    Grammar parser = new Grammar(System.in);
    parser.Input();
  }

/** Root production. */
  static final public void Input() throws ParseException {Token elem;
 String elemStr;
    elem = jj_consume_token(create);
elemStr = elem.toString();
    System.out.println("$$$$" + elemStr);
    if(elemStr.contains("IMAGE")){
         String src;
         String result = ">>> ";
        src = elemStr.split("SOURCE ")[1];
        result += "<img src=" + src + "/>";
        System.out.println(result);
    }
    else if(elemStr.contains("HEADING")){
            String text = null, color = null, font = null, result = "<h1";
            boolean flag = false;
                if(elemStr.contains(" AND ")){
                    String[] arr = elemStr.split(" AND ");
                    for(var substring : arr){
                        if(substring.contains("TEXT"))
                            text = arr[0].split(" TEXT ")[1];
                        else if(substring.contains("COLOR")){
                            color = arr[0].split(" COLOR ")[1];
                            flag = true;
                        }
                        else if(substring.contains("FONT")){
                            font = arr[0].split(" FONT ")[1];
                           flag = true;
                        }
                    }
                }else{
                    if(elemStr.contains("TEXT"))
                        text = elemStr.split(" TEXT ")[1];
                    else if(elem.toString().contains("COLOR")){
                        color = elemStr.split(" COLOR ")[1];
                        flag = true;
                    }
                    else if(elemStr.contains("FONT")){
                        font = elemStr.split(" FONT ")[1];
                        flag = true;
                    }
                }
                if(flag)
                    result += " style=\"";
                if(color != null)
                    result+= "color:"+color+";";
                if(font != null)
                    result+="font-family:"+font+";\"";
                if(text != null){
                    if(flag)
                        result += "\"";
                    result+= ">"+text.replaceAll("\"", "");
                    result += "</h1>";
                }
                System.out.println(result);
    }
    else if(elem.toString().contains("PARAGRAPH")){
        String text = null, color = null, font = null, result = "<p";
        boolean flag = false;
        if(elemStr.contains(" AND ")){
            System.out.println("#########################3");
            String[] arr = elemStr.split(" AND ");
            for(var substring : arr){
                if(substring.contains("TEXT"))
                    text = arr[0].split(" TEXT ")[1];
                else if(substring.contains("COLOR")){
                    color = arr[0].split(" COLOR ")[1];
                    flag = true;
                }
                else if(substring.contains("FONT")){
                    font = arr[0].split(" FONT ")[1];
                   flag = true;
                }
            }
        }
            if(flag)
                result += " style=\"";
            if(color != null)
                result+= "color:"+color+";";
            if(font != null)
                result+="font-family:"+font+";\"";
            if(text != null){
                if(flag)
                    result += "\"";
                result+= ">"+text.replaceAll("\"", "");
                result += "</p>";
            }
            System.out.println(result);
    }
    else if(elem.toString().contains("LINK")){
            String text = null, link = null, result;
                if(elem.toString().contains("AND WITH")){
                    String[] arr = elem.toString().split(" AND WITH ");
                    for(var substring : arr){
                        if(substring.contains("TEXT"))
                            text = arr[0].split(" TEXT ")[1];
                        else if(substring.contains("LINK"))
                            link = arr[0].split(" LINK ")[1];
                    }
                }
                result = "<a href=\"";
                if(link != null)
                    result+= link + ">";
                if(text != null)
                    result+= text + "<//a>";
                System.out.println(result);
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new GrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new GrammarTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new GrammarTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[17];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 17; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
